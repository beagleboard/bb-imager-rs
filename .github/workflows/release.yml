name: Create Release artifacts

on:
  push:
    branches: [ "main" ]
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always
  VERBOSE: 1

defaults:
  run:
    shell: bash

jobs:
  native:
    strategy:
      matrix:
        platform:
          - runs-on: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            make-targets: setup-debian-deps package-cli-linux-deb package-cli-linux-targz package-gui-linux-targz package-gui-linux-appimage package-gui-linux-deb
            pb2: 0

          - runs-on: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            make-targets: setup-debian-deps package-cli-linux-deb package-cli-linux-targz package-gui-linux-targz package-gui-linux-appimage package-gui-linux-deb package-service-linux-targz package-service-linux-deb
            pb2: 1

    name: Build Artifacts - ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.runs-on }}
    env:
      PB2_MSPM0: ${{ matrix.platform.pb2 }}
      BCF_CC1352P7: 1
      BCF_MSP430: 1
      TARGET: ${{ matrix.platform.target }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set version
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Set PRE_RELEASE Environment Variable
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: echo "PRE_RELEASE=1" >> $GITHUB_ENV

    - name: Select rust toolchain
      run: rustup toolchain install stable --profile minimal

    - name: Add ${{ matrix.platform.target }} target
      run:  rustup target add ${{ matrix.platform.target }}

    - name: Use caching
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1"
        
    - name: Install packaging deps
      run: make setup-packaging-deps

    - name: Build packages
      run: make ${{ matrix.platform.make-targets }}

    # Do not do versioning for Pre-Release packages
    - name: Rename Pre-Release Packages
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: make package-rename

    - name: Pre-Release
      uses: softprops/action-gh-release@v2
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with:
        prerelease: true
        name: Continuous Release
        tag_name: continuous-release
        files: |
          bb-imager-gui/dist/*
          bb-imager-cli/dist/*
          bb-imager-service/dist/*

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        files: |
          bb-imager-gui/dist/*
          bb-imager-cli/dist/*
          bb-imager-service/dist/*

  linux-cross:
    name: Build Artifacts - armv7-unknown-linux-gnueabihf
    runs-on: ubuntu-24.04
    env:
      NO_BUILD: 1
      TARGET: armv7-unknown-linux-gnueabihf
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set version
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Set PRE_RELEASE Environment Variable
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: echo "PRE_RELEASE=1" >> $GITHUB_ENV

    - name: Build binary
      uses: houseabsolute/actions-rust-cross@v1
      with:
        command: build
        target: armv7-unknown-linux-gnueabihf
        args: "--locked --release -F bcf_msp430 -F bcf_cc1352p7 -p bb-imager-cli -p bb-imager-gui"
        strip: true

    - name: Install packaging deps
      run: make setup-packaging-deps

    - name: Build packages
      run: make package-cli-linux-targz package-cli-linux-deb package-gui-linux-targz package-gui-linux-deb 

    # Do not do versioning for Pre-Release packages
    - name: Rename Pre-Release Packages
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: make package-rename

    - name: Pre-Release
      uses: softprops/action-gh-release@v2
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with:
        prerelease: true
        name: Continuous Release
        tag_name: continuous-release
        files: |
          bb-imager-gui/dist/*
          bb-imager-cli/dist/*
          bb-imager-service/dist/*

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        files: |
          bb-imager-gui/dist/*
          bb-imager-cli/dist/*
          bb-imager-service/dist/*

  vendor-deps:
    name: Vendor dependencies
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Create dependency tar
      run: |
        cargo vendor
        tar -czvf cargo-vendor.tar.gz vendor/

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        generate_release_notes: true
        files: cargo-vendor.tar.gz

  macos-job:
    strategy:
      matrix:
        target: [aarch64-apple-darwin, x86_64-apple-darwin]
    name: Build MacOS Artifacts for ${{ matrix.target }}
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set version
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Set PRE_RELEASE Environment Variable
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: echo "PRE_RELEASE=1" >> $GITHUB_ENV

    - name: Select rust toolchain
      run: rustup toolchain install stable --profile minimal

    - name: Add ${{ matrix.platform.target }} target
      run:  rustup target add ${{ matrix.target }}

    - name: Use caching
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1"
        
    - name: Install packaging deps
      run: make setup-packaging-deps

    - name: Setup macos signing
      working-directory: bb-imager-gui
      env:
        CERT_DEVELOPER_APP_BASE64: ${{ secrets.CERT_DEVELOPER_APP_BASE64 }}
        CERT_DEVELOPER_INSTALL_BASE64: ${{ secrets.CERT_DEVELOPER_INSTALL_BASE64 }}
        CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APP_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        echo "$CERT_DEVELOPER_APP_BASE64" | base64 --decode > developer_app.p12
        echo "$CERT_DEVELOPER_INSTALL_BASE64" | base64 --decode > developer_installer.p12

        security create-keychain -p "" build.keychain-db
        security default-keychain -s build.keychain-db
        security unlock-keychain -p "" build.keychain-db

        security import developer_app.p12 -k build.keychain-db -P "$CERT_PASSWORD" -T /usr/bin/codesign
        security import developer_installer.p12 -k build.keychain-db -P "$CERT_PASSWORD" -T /usr/bin/productsign

        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain-db

        xcrun notarytool store-credentials "AC_PASSWORD" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.APP_PASSWORD }}"

        echo "" >> Cargo.toml
        echo "[package.metadata.packager.macos]" >> Cargo.toml
        echo "signing_identity = \"${{ secrets.TEAM_ID }}\"" >> Cargo.toml

    - name: Build packages
      env:
        TARGET: ${{ matrix.target }}
      run: make package-gui-macos-dmg

    - name: Notarize macOS App
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APP_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        dmg_path=$(find bb-imager-gui/dist/ -name "*.dmg" | head -n 1)
        echo "Submitting for notarization: $dmg_path"
        xcrun notarytool submit "$dmg_path" --keychain-profile "AC_PASSWORD" --wait
        xcrun stapler staple "$dmg_path"

    # Do not do versioning for Pre-Release packages
    - name: Rename Pre-Release Packages
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: make package-rename

    - name: Pre-Release
      uses: softprops/action-gh-release@v2
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with:
        prerelease: true
        name: Continuous Release
        tag_name: continuous-release
        files: |
          bb-imager-gui/dist/*

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        files: |
          bb-imager-gui/dist/*

  windows-job:
    name: Build Windows Artifacts
    runs-on: windows-latest
    env:
      BCF_CC1352P7: 1
      BCF_MSP430: 1
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true

    - name: Set version
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Set PRE_RELEASE Environment Variable
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: echo "PRE_RELEASE=1" >> $GITHUB_ENV

    - name: Select rust toolchain
      run: rustup toolchain install stable --profile minimal

    - name: Add ${{ matrix.platform.target }} target
      run:  rustup target add aarch64-pc-windows-msvc x86_64-pc-windows-msvc

    - name: Use caching
      uses: Swatinem/rust-cache@v2
      with:
        prefix-key: "v1"
        
    - name: Install packaging deps
      run: make setup-packaging-deps

    - name: Build packages
      run: |
        TARGET=x86_64-pc-windows-msvc make package-gui-windows-wix package-gui-windows-portable
        TARGET=aarch64-pc-windows-msvc make package-gui-windows-portable

    # Do not do versioning for Pre-Release packages
    - name: Rename Pre-Release Packages
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: make package-rename

    - name: Pre-Release
      uses: softprops/action-gh-release@v2
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with:
        prerelease: true
        name: Continuous Release
        tag_name: continuous-release
        files: |
          bb-imager-gui/dist/*

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        files: |
          bb-imager-gui/dist/*
